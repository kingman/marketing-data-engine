---
timeout: 3600s
steps:
  - id: prepare
    name: "${_BUILDER_IMAGE_NAME}:${_BUILDER_IMAGE_TAG}"
    entrypoint: /bin/bash
    args:
      - "-e"
      - "-x"
      - "-c"
      - >- # folded text - replace newlines with spaces - each command needs to be separated by ';'
        gcloud projects create ${_TEST_PROJECT_ID} --folder ${_FOLDER_ID} ;
        sleep 10 ;
        trap "gcloud projects delete ${_TEST_PROJECT_ID} --quiet " ERR ;
        gcloud billing projects link ${_TEST_PROJECT_ID} --billing-account=${_BILLING_ACCOUNT} ;

  - id: pre_tf_setup
    name: "${_BUILDER_IMAGE_NAME}:${_BUILDER_IMAGE_TAG}"
    entrypoint: /bin/bash
    args:
      - "-c"
      - >- # folded text - replace newlines with spaces - each command needs to be separated by ';'
        export PROJECT_ID=${_TEST_PROJECT_ID};
        export MAJ_USE_DEPLOYER_SA=true;
        scripts/generate-tf-backend.sh;

  - id: run-terraform
    name: "${_BUILDER_IMAGE_NAME}:${_BUILDER_IMAGE_TAG}"
    args:
      - "-e"
      - "-x"
      - "-c"
      - >-
        export PROJECT_ID=${_TEST_PROJECT_ID};
        export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_DEPLOYER_SA};
        gcloud config set project ${_TEST_PROJECT_ID};
        gcloud config set auth/impersonate_service_account ${_DEPLOYER_SA};
        cd /workspace/infrastructure/terraform;
        terraform init;
        terraform apply -auto-approve;

    entrypoint: /bin/bash
    env:
      - TF_VAR_tf_state_project_id=${_TEST_PROJECT_ID}
      - TF_VAR_google_default_region=${_REGION}
      - TF_VAR_deploy_dataform=true
      - TF_VAR_deploy_activation=true
      - TF_VAR_deploy_feature_store=true
      - TF_VAR_deploy_pipelines=true
      - TF_VAR_deploy_monitoring=true
      - TF_VAR_data_project_id=${_TEST_PROJECT_ID}
      - TF_VAR_destination_data_location=${_REGION}
      - TF_VAR_property_id=${_GA4_PROPERTY_ID}
      - TF_VAR_data_processing_project_id=${_TEST_PROJECT_ID}
      - TF_VAR_source_ga4_export_project_id=${PROJECT_ID}
      - TF_VAR_source_ga4_export_dataset=${_GA4_EXPORT_DATASET}
      - TF_VAR_source_ads_export_data="[{ project = \"${PROJECT_ID}\", dataset = \"${_ADS_EXPORT_DATASET}\", table_suffix = \"${_ADS_EXPORT_TABLE_SUFFIX}\" }]"
      - TF_VAR_feature_store_project_id=${_TEST_PROJECT_ID}
      - TF_VAR_website_url=${_WEBSITE_URL}
      - TF_VAR_activation_project_id=${_TEST_PROJECT_ID}
      - TF_VAR_ga4_property_id=${_GA4_PROPERTY_ID}
      - TF_VAR_ga4_stream_id=${_GA4_STREAM_ID}
      - TF_VAR_ga4_measurement_id=${_GA4_MEASUREMENT_ID}
      - TF_VAR_ga4_measurement_secret=${_GA4_MEASUREMENT_SECRET}
      - TF_VAR_project_owner_email=${_DATAFORM_REPO_OWNER_EMAIL}
      - TF_VAR_dataform_github_repo=${_DATAFORM_GITHUB_REPO_URL}
      - TF_VAR_dataform_github_token=${_DATAFORM_GITHUB_TOKEN}

tags:
  - "ci"
  - "integration"

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _TEST_PROJECT_ID: "maj-int-${SHORT_SHA}"
  _DEPLOYER_SA: "deployer@${_TEST_PROJECT_ID}.iam.gserviceaccount.com"
  _BUILDER_IMAGE_NAME: "us-central1-docker.pkg.dev/${PROJECT_ID}/ci/builder"
  _BUILDER_IMAGE_TAG: "latest"
# The following subsitutions must be passed by the Cloud Build trigger:
# _BILLING_ACCOUNT
# _FOLDER_ID
# _REGION
# _GA4_EXPORT_DATASET
# _ADS_EXPORT_DATASET
# _ADS_EXPORT_TABLE_SUFFIX
# _WEBSITE_URL
# _GA4_PROPERTY_ID
# _GA4_STREAM_ID
# _GA4_MEASUREMENT_ID
# _GA4_MEASUREMENT_SECRET
# _DATAFORM_REPO_OWNER_EMAIL
# _DATAFORM_GITHUB_REPO_URL
# _DATAFORM_GITHUB_TOKEN
    